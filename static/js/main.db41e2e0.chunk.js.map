{"version":3,"sources":["reducers/TodoReducer.js","actions/actionsTypes.js","reducers/FilterReducer.js","reducers/MainReducer.js","actions/actionCreator.js","containers/CreateTodo.js","containers/Table.js","App.js","index.js"],"names":["INITIAL_DATA","TodoReducer","state","action","type","id","text","completed","map","todo","numIndex","parseInt","filter","visibilityFilter","combineReducers","todos","TodoId","addTodo","deleteTodo","toggleTodo","setVisibilityFilter","clearAll","CreateTodo","props","onSubmitChange","e","preventDefault","setState","todotext","onChangeTodoText","target","value","bind","className","style","color","paddingRight","onSubmit","this","required","onChange","placeholder","formNoValidate","onClick","Component","connect","dispatch","bindActionCreators","Table","emptyAll","href","class","length","key","textDecoration","textDecorationColor","lineHeight","fontSize","background","borderRadius","boxShadow","opacity","transition","backgroundColor","getVisibleTodos","t","Error","App","React","store","compose","window","devToolsExtension","f","createStore","MainReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db41e2e0.chunk.js","sourcesContent":["//Creating reducers for Adding_Todo, Deleting_Todo, Toggle_Todo and Clearing_All_List\r\n\r\nimport {\r\n  ADD_TODO,\r\n  REMOVE_TODO,\r\n  TOGGLE_TODO,\r\n  CLEAR_ALL\r\n} from \"../actions/actionsTypes\";\r\n\r\nconst INITIAL_DATA = [];\r\n\r\nconst TodoReducer = (state = INITIAL_DATA, action) => {\r\n  switch (action.type) {\r\n    case ADD_TODO: //Adds todo items to the list\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ];\r\n    case TOGGLE_TODO: //show items only relevant to the link i.e. marked_completed, active & all.\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n    case REMOVE_TODO: //straight-away deletes the todo item from thye list\r\n      const numIndex = parseInt(action.id);\r\n      return state.filter(todo => todo.id !== numIndex);\r\n\r\n    case CLEAR_ALL: //deletes all todo items at once.\r\n      return INITIAL_DATA;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default TodoReducer;\r\n","// Declaring types for action creators to avoid mistakes in speling and other wise.\r\n\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const SHOW_ALL = \"SHOW_ALL\";\r\nexport const SHOW_COMPLETED = \"SHOW_COMPLETED\";\r\nexport const SHOW_ACTIVE = \"SHOW_ACTIVE\";\r\nexport const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\r\nexport const CLEAR_ALL = \"CLEAR_ALL\";\r\n","/*Creating a separate reducer for filtering out \r\nTodos marked complete or active or all.\r\nSeparation of concerns.*/\r\n\r\nimport { SHOW_ALL, SET_VISIBILITY_FILTER } from \"../actions/actionsTypes\";\r\n\r\nconst visibilityFilter = (state = SHOW_ALL, action) => {\r\n  switch (action.type) {\r\n    case SET_VISIBILITY_FILTER:\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default visibilityFilter;\r\n","import { combineReducers } from \"redux\";\r\nimport todos from \"./TodoReducer\";\r\nimport visibilityFilter from \"./FilterReducer\";\r\n\r\nexport default combineReducers({\r\n  todos,\r\n  visibilityFilter\r\n});\r\n\r\n//Combining all the reducers declared,\r\n// into one combineReducers() method imported from,\r\n// the Redux library and exporting them for business logic.\r\n","//Defining action creators to be accessed by reducers to implement final business logic.\r\n//All the reducers depend on the pay-load from action creators to mutate state in the application.\r\n\r\nimport {\r\n  ADD_TODO,\r\n  REMOVE_TODO,\r\n  TOGGLE_TODO,\r\n  SET_VISIBILITY_FILTER,\r\n  CLEAR_ALL\r\n} from \"./actionsTypes\";\r\n\r\nlet TodoId = 0;\r\n\r\nexport const addTodo = text => ({\r\n  type: ADD_TODO,\r\n  id: TodoId++,\r\n  text\r\n});\r\n\r\nexport const deleteTodo = id => ({\r\n  type: REMOVE_TODO,\r\n  id: id\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: TOGGLE_TODO,\r\n  id: id\r\n});\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n  type: SET_VISIBILITY_FILTER,\r\n  filter\r\n});\r\n\r\nexport const clearAll = id => ({\r\n  type: CLEAR_ALL,\r\n  id: id\r\n});\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo } from \"../actions/actionCreator\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport \"./container.css\";\r\n\r\nclass CreateTodo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todotext: \"\"\r\n    };\r\n    this.onChangeTodoText = this.onChangeTodoText.bind(this);\r\n    this.onSubmitChange = this.onSubmitChange.bind(this);\r\n  }\r\n\r\n  onSubmitChange = e => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      todotext: this.state.todotext\r\n    });\r\n  };\r\n\r\n  onChangeTodoText = e => this.setState({ todotext: e.target.value });\r\n  //Rendering logic for an add button which adds todo item to the list.\r\n  render() {\r\n    return (\r\n      <div className=\"add-todo-card\">\r\n        <h1 style={{ color: \"purple\", paddingRight: \"20px\" }}>Todos</h1>\r\n        <form onSubmit={this.onSubmitChange}>\r\n          <input\r\n            required\r\n            onChange={this.onChangeTodoText}\r\n            value={this.state.todotext}\r\n            type=\"text\"\r\n            className=\"input-form\"\r\n            placeholder=\"Add your tasks here...\"\r\n          />\r\n          <button\r\n            formNoValidate\r\n            type=\"submit\"\r\n            onClick={() => {\r\n              this.props.addTodo(this.state.todotext);\r\n              this.setState({ todotext: \"\" });\r\n            }}\r\n            className=\"add-btn\"\r\n          >\r\n            Add\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//Dispatching all the logic to be bound with action creators for ultimate business logic.\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      addTodo\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(CreateTodo);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  deleteTodo,\r\n  toggleTodo,\r\n  setVisibilityFilter,\r\n  clearAll\r\n} from \"../actions/actionCreator\";\r\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from \"../actions/actionsTypes\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport \"./container.css\";\r\n\r\nclass Table extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      emptyAll: \"\"\r\n    };\r\n  }\r\n\r\n  //Creating logic for the todo table.\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ToDo\">\r\n        <nav>\r\n          <ul className=\"footer\">\r\n            <li>\r\n              {\" \"}\r\n              <a\r\n                href=\"#\"\r\n                class=\"selected1\"\r\n                onClick={() => this.props.setVisibilityFilter(SHOW_ALL)}\r\n              >\r\n                All\r\n              </a>\r\n            </li>\r\n            <li>\r\n              {\" \"}\r\n              <a\r\n                href=\"#\"\r\n                class=\"selected2\"\r\n                onClick={() => this.props.setVisibilityFilter(SHOW_COMPLETED)}\r\n              >\r\n                Completed\r\n              </a>\r\n            </li>\r\n            <li>\r\n              {\" \"}\r\n              <a\r\n                href=\"#\"\r\n                class=\"selected3\"\r\n                onClick={() => this.props.setVisibilityFilter(SHOW_ACTIVE)}\r\n              >\r\n                Active\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        {this.props.todos.length !== 0 ? (\r\n          <table className=\"todo-table\">\r\n            <tbody>\r\n              {this.props.todos.map(todo => (\r\n                <tr key={todo.id}>\r\n                  <td\r\n                    style={{\r\n                      textDecoration: todo.completed ? \"line-through\" : \"none\", //logic for getting a line-through and other transition effects on the todo item on clicking a mark complete button.\r\n                      textDecorationColor: todo.completed ? \"red\" : \"none\",\r\n                      lineHeight: todo.completed ? \"1em\" : \"none\",\r\n                      fontSize: todo.completed ? \"15pt\" : \"12pt\",\r\n                      background: todo.completed ? \"#85ffb4\" : \"none\",\r\n                      borderRadius: todo.completed ? \"25px\" : \"none\",\r\n                      boxShadow: todo.completed ? \"0 0 30px\" : \"none\",\r\n                      opacity: todo.completed ? \"0.5\" : \"none\",\r\n                      transition: todo.completed\r\n                        ? \"1s background ease-in\"\r\n                        : \"1s background ease-out\",\r\n                      color: todo.completed ? \"black\" : \"white\",\r\n                      opacity: todo.completed ? \"1\" : \"none\"\r\n                    }}\r\n                  >\r\n                    {todo.text}\r\n                  </td>\r\n                  <td>\r\n                    <button\r\n                      className=\"btn\"\r\n                      onClick={() => this.props.deleteTodo(todo.id)}\r\n                      style={{\r\n                        color: \"white\",\r\n                        backgroundColor: \"red\"\r\n                      }}\r\n                    >\r\n                      X\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn\"\r\n                      onClick={() => this.props.toggleTodo(todo.id)}\r\n                      style={{ color: \"white\", backgroundColor: \"#06fa06c9\" }}\r\n                    >\r\n                      ✔\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        ) : (\r\n          <div className=\"message\">\r\n            <div>\r\n              <h4>Empty List. Please add tasks to see here.</h4>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <button\r\n          className=\"clear-btn\"\r\n          onClick={() => {\r\n            this.props.clearAll(this.state.emptyAll);\r\n            this.setState({ emptyAll: \"\" });\r\n          }}\r\n        >\r\n          Clear All\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n  switch (filter) {\r\n    case SHOW_ALL:\r\n      return todos;\r\n    case SHOW_COMPLETED:\r\n      return todos.filter(t => t.completed);\r\n    case SHOW_ACTIVE:\r\n      return todos.filter(t => !t.completed);\r\n    default:\r\n      throw new Error(\"Unknown filter: \" + filter);\r\n  }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: getVisibleTodos(state.todos, state.visibilityFilter),\r\n    visibilityFilter: state.visibilityFilter\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      deleteTodo,\r\n      toggleTodo,\r\n      setVisibilityFilter,\r\n      clearAll\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\r\n","import React from \"react\";\nimport CreateTodo from \"./containers/CreateTodo\";\nimport Table from \"./containers/Table\";\n\nimport \"./App.css\";\n//Final app that combines all the sub-components of the whole application.\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"row\">\n          <div className=\"create-todo\">\n            <CreateTodo />\n          </div>\n          <Table />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n// eslint-disable-next-line\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport MainReducer from \"./reducers/MainReducer\";\nimport App from \"./App\";\n\nconst store = compose(\n  window.devToolsExtension ? window.devToolsExtension() : f => f\n)(createStore)(MainReducer);\n\n//Wrapped the App with the Provider to access redux across the whole app\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}